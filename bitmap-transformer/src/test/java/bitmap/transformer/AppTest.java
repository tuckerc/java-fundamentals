/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitmap.transformer;

import org.junit.Test;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;

import static org.junit.Assert.*;

public class AppTest {

    @Test
    public void testInvert() {

      String[] args = {"src/test/assets/mario.bmp", "src/test/assets/marioInverted.bmp", "invert"};

      App.main(args);

      Bitmap expectedBitmap = new Bitmap();
      expectedBitmap.readBitmap(new File("src/main/assets/marioInverted.bmp"));

      Bitmap actualBitmap = new Bitmap();
      actualBitmap.readBitmap(new File("src/test/assets/marioInverted.bmp"));

      int expectedWidth = expectedBitmap.img.getWidth();
      int actualWidth = actualBitmap.img.getWidth();
      assertEquals(expectedWidth, actualWidth);

      int expectedHeight = expectedBitmap.img.getHeight();
      int actualHeight = actualBitmap.img.getHeight();
      assertEquals(expectedHeight, actualHeight);

      for (int i = 0; i < actualWidth; i++) {
        for (int j = 0; j < actualHeight; j++) {
          assertEquals(expectedBitmap.img.getRGB(i, j), actualBitmap.img.getRGB(i, j));
        }
      }

    }

  @Test
  public void testRandomize() {

    String[] args = {"src/test/assets/mario.bmp", "src/test/assets/marioRandom.bmp", "random"};

    App.main(args);

    Bitmap expectedBitmap = new Bitmap();
    expectedBitmap.readBitmap(new File("src/main/assets/mario.bmp"));

    Bitmap actualBitmap = new Bitmap();
    actualBitmap.readBitmap(new File("src/test/assets/marioRandom.bmp"));

    int expectedWidth = expectedBitmap.img.getWidth();
    int actualWidth = actualBitmap.img.getWidth();
    assertEquals(expectedWidth, actualWidth);

    int expectedHeight = expectedBitmap.img.getHeight();
    int actualHeight = actualBitmap.img.getHeight();
    assertEquals(expectedHeight, actualHeight);

    for (int i = 0; i < actualWidth; i++) {
      for (int j = 0; j < actualHeight; j++) {
        assertNotEquals(expectedBitmap.img.getRGB(i, j), actualBitmap.img.getRGB(i, j));
      }
    }

  }

  @Test
  public void testLighten() {

    String[] args = {"src/test/assets/mario.bmp", "src/test/assets/marioLighter.bmp", "lighten"};

    App.main(args);

    Bitmap expectedBitmap = new Bitmap();
    expectedBitmap.readBitmap(new File("src/main/assets/marioLighter.bmp"));

    Bitmap actualBitmap = new Bitmap();
    actualBitmap.readBitmap(new File("src/test/assets/marioLighter.bmp"));

    int expectedWidth = expectedBitmap.img.getWidth();
    int actualWidth = actualBitmap.img.getWidth();
    assertEquals(expectedWidth, actualWidth);

    int expectedHeight = expectedBitmap.img.getHeight();
    int actualHeight = actualBitmap.img.getHeight();
    assertEquals(expectedHeight, actualHeight);

    for (int i = 0; i < actualWidth; i++) {
      for (int j = 0; j < actualHeight; j++) {
        assertEquals(expectedBitmap.img.getRGB(i, j), actualBitmap.img.getRGB(i, j));
      }
    }

  }

  @Test
  public void testDarken() {

    String[] args = {"src/test/assets/mario.bmp", "src/test/assets/marioDarker.bmp", "darken"};

    App.main(args);

    Bitmap expectedBitmap = new Bitmap();
    expectedBitmap.readBitmap(new File("src/main/assets/marioDarker.bmp"));

    Bitmap actualBitmap = new Bitmap();
    actualBitmap.readBitmap(new File("src/test/assets/marioDarker.bmp"));

    int expectedWidth = expectedBitmap.img.getWidth();
    int actualWidth = actualBitmap.img.getWidth();
    assertEquals(expectedWidth, actualWidth);

    int expectedHeight = expectedBitmap.img.getHeight();
    int actualHeight = actualBitmap.img.getHeight();
    assertEquals(expectedHeight, actualHeight);

    for (int i = 0; i < actualWidth; i++) {
      for (int j = 0; j < actualHeight; j++) {
        assertEquals(expectedBitmap.img.getRGB(i, j), actualBitmap.img.getRGB(i, j));
      }
    }

  }


}

